## 파드 스케줄링
파드 스케줄링에서는 어떤 노드 혹은 어떤 IP에 Pod를 실행하게 설정할지와 파드를 다른 노드로 이동시키는 방법과 같은 스케줄링 관련하여 알아보겠습니다.  

## 노드셀렉터
.spec 필드에 어떤 노드를 선택할지를 지정할 수 있는 노드셀렉터 기능이 있습니다.  
```
# 노드들의 label 확인
kubectl get nodes --show-labes

# "docker-desktop"노드에 "disktyp=ssd" 레이블 추가
kubectl label nodes docker-desktop disktyp=ssd
```
- 노드셀렉터 사용
```
apiVersion: v1
kind: Pod
metadata:
  name: kubernetes-nodeselector-pod
spec:
  containers:
  - name: kubernetes-nodeselector-pod
    image: arisu1000/simple-container-app:latest
    ports:
    - containerPort: 8080
  nodeSelector:
    disktype: ssd
```

## 어피니티와 안티 어피니티
파드들을 동일한 노드에 실행하는 어피니티와 파드들은 다른 노드에 나누어 실행하도록 설정하는 안티 어피니티를 알아보겠습니다.  

### 노드 어피니티
노드 어피니티는 노드셀렉터와 동일하게 레이블을 기반으로 파드를 스케줄링합니다.  
노드 어피니티와 노드셀렉터를 함께 설정한 경우 둘 다 만족하는 노드에 파드가 스케줄링됩니다.  
- 노드 어피니티 필드
  - requireDuringSchedulingIgonreDuringExecution : 반드시 필요한 조건
  - preferredDuringSchedulingIgnoreDurigExecution : 만족하면 좋은 조건(반드시 만족x)
2개 필드 모두  실행 중에 조건이 바뀌면 무시합니다. 이미 파드가 스케줄링하여 특정 노드에 실행중에 중간에 해당 노드의 조건이 바뀐다고 영향을 미치지않습니다.  
```
apiVersion: v1
kind: Pod
metadata:
  name: kubernetes-nodeaffinity-pod
spec:
  containers:
  - name: kubernetes-nodeaffinity-pod
    image: arisu1000/simple-container-app:latest
    ports:
    - containerPort: 8080
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: beta.kubernetes.io/os
            operator: In
            values:
            - linux
            - window
          - key: disktype
            operator: Exists
          # - key: core
            # operator: Gt  
            # values: 
            # - "4"
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 10
        preference:
          matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - worker-node01
```

### 파드의 어피니티와 안티 어피니티
파드의 어피티니 같은 경우에는 주로 통신이 이뤄지는 컨테이너는 같은 노드에 두어 생성하면 네트워크 속도를 줄일 수 있다.  
파드의 안티 어피니티는 CPU나 네트워크 같은 자원을 많이 사용하는 앱 컨테이너가 있을 때 여러 노드로 파드를 분산하는 것이다.  
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-server
spec:
  selector:
    matchLabels:
      app: web-store
  replicas: 2
  template:
    metadata:
      labels:
        app: web-store
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - web-store
            topologyKey: "kubernetes.io/hostname"
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - store
            topologyKey: "kubernetes.io/hostname"
      containers:
      - name: web-app
        image: nginx:1.12-alpine
```


