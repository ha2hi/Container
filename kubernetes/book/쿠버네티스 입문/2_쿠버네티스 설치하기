### 설치 없이 쿠버네티스 사용하기
쿠버네티스 소개에서 쿠버네티스의 특징 중 "어디에서나 실행 가능"이 있었다. 쿠버네티스는 윈도우, 맥 혹은 리눅스에 구성할 수도 있으나 간편하게 웹 실습환경을 사용하여 테스트해볼 수 있다.  
나는 개인적으로 쿠버네티스 공부를 이성미님의 "따라하면서 배우는 쿠버네티스"로 처음 공부 시작했는데 이당시 Play with Kubernets 구성 방법을 익혀서 테스트해봤기 때문에 Play with Kubernetes가 카타코다에 비해 더 편하다.  
Play with Kubernetes는 시간 제한(3시간)이 있기 때문에 참고해야됨.  
- 실습용 웹 환경
1. 카타코다 쿠버네티스 플레이그라운드
2. Play with Kubernetes

### 쿠버네티스 클러스터를 직접 구성하는 도구
쿠버네티스를 도커 데스크톱이 아닌 리눅스 환경에 직접 구성해야되는 상황이 올 수 있다.  
직접 구성할 때 가장  대표적인 도구인 kubeadm, kubespray를 알아보겠다.

### kubeadm
kubeadm은 쿠버네티스에서 공식 제공하는 클러스터 생성/관리 도구입니다.  
여러 대의 마스터 노드를 구성하고 그 앞에 로드밸런서를 두었습니다. 워커 노도들이 마스터 노드에 접근할 때는 로드밸런서를 거쳐 접근합니다.  
마스터 노드 1대에 장애가 발생하더라도 로드밸런서를 통해 다른 마스터노드로 접근할 수 있게 만들어 신뢰성을 유지합니다.  

쿠버네티스 클러스터 저장소인 etcd 클러스터를 마스터 노드에 함께 설치해서 운용하는 방식입니다. 이때 etcd 클러스터를 스택 etcd라고 합니다.  
필요에 따라서 etcd 클러스터를 마스터 노드가 아닌 다른 곳에 구성해두고 사용할 수 있습니다.  

### kubespray
kubespray는 사용 서비스에 적합한 보안성과 고가용성이 있는 쿠버네티스 클러스터를 배포하는 오픈 소스 프로젝트입니다.  
kubespray는 앤서블을 기반으로 개발되었습니다. 설정에 따라 사용자에게 맞는 쿠버네티스 클러스터를 구성할 수 있으므로 온프레미스 환경에서 사용 서비스로 사용하기 좋습니다.  

Kubespray는 kubeadm과 고가용성 구조가 다릅니다. kubeadm은 별도의 로드밸런서를 두는 것과 달리 kubespray는 노드 각각의 nginx reverse proxy가 실행됩니다.  
이 nginx proxy가 전체 마스터 노드를 바라보는 구조입니다. 그래서 쿠버네티스의 컴포넌트들은 직접 마스터 노드와 통신하지 않고 자신의 서버 안 nginx와 통신합니다.  
마스터 노드의 장애 감지는 헬스체크를 이용해 nginx가 알아서 처리합니다.  

### 우분투에서 클러스터 구성하기
Kubespray를 사용하여 우분투에 클러스터를 구성해보려고합니다.  
구성하기 앞서 쿠버네티스는 CNI를 만족하는 다양한 네티크워크 플러그인을 지원합니다. CNI란 간단히 말해 분산 노드에서 컨테이너를끼리 소통하기 위한 네트워크 인터페이스라고 생각하면 됩니다.  
여러 CNI 중 Calico를 사용하여 클러스터를 구성해보겠습니다.  

마스터 노드는 3대, 워커 노드는 2대로 구성할 것 입니다. 마스터 노드는 1대로만 구성할 수 있지만 사용 서비스라면 고가용성을 고려해 3대 혹은 5대까지 생성합니다.  
마스터노드를 많이 구성하더라도 kube-controller-manager가 활성화 상태로 동작할 수 있는 리더 마스터노드는 1대로, 마스터 노드가 많다고 성능이 크게 향상되지는 않습니다.  

클러스터 관리 도구 : kubespray v.2.16.0
CNI : calico v.3.7.4
Docker : v.19.0.3, Kubernetes : v.1.21.1, etcd : v.3.4.13   
OS : Ubuntu16.04  
instance-type : 1core vcpu, 2gb RAM  
master node : 3대  
worker node : 2대  

1. SSH 키 셍성과 배포  
Master Node에 접속하여 ssh 키를 생성합니다.
```
#ssh key 생성
ssh-keygen -t rsa

### ssh key 복사
ssh-copy-id root@192.1168.0.2
ssh-copy-id root@192.1168.0.3
ssh-copy-id root@192.1168.0.4
```

2. kubespray 설치
```
sudo apt update
sudo apt -y install python-pip

git clone https://github.com/kubernetes-sigs/kubespray.git

cd kubespray
```

3. 필수 패키지 설치
```
pip install -r requirement.txt
```

4. kubespray 설정
```
# 기본 템플릿 복사
cp -rfp inverntory/sample inverntory/mycluster

# kubespray 설정
vi inverntory/mycluster/inventory.ini
[all]
node1 ansible_host=192.168.100.100 ip=192.168.100.100 etcd_member_name=etcd1
node2 ansible_host=192.168.100.101 ip=192.168.100.101 etcd_member_name=etcd2
node3 ansible_host=192.168.100.102 ip=192.168.100.102 etcd_member_name=etcd3
node4 ansible_host=192.168.100.103 ip=192.168.100.103
node5 ansible_host=192.168.100.104 ip=192.168.100.104

[kube_control_plane]
node1
node2
node3

[etcd]
node1
node2
node3

[kube_node]
node4
node5

[calico_rr]

[k8s_cluster:children]
kube_control_plane
kube_node
calico_rr

5. 구성한 kubespray 실행
```
ansible-playbook -i inventory/mycluster/inventory.ini -v --become --become-user=root cluster.yml

# root 계정 변경
sudo -i

# 노드 연결 확인
kubectl get node
```